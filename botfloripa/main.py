import os
import json
import logging
import discord
from discord.ext import commands
import asyncio
from dotenv import load_dotenv
from utils.db import setup_database

# Load environment variables
load_dotenv()

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("bot.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger("bot")

# Load configuration
try:
    with open('config.json', 'r') as f:
        config = json.load(f)
except FileNotFoundError:
    logger.error("config.json not found. Please create a config file.")
    exit(1)
except json.JSONDecodeError:
    logger.error("config.json is not valid JSON. Please check the format.")
    exit(1)

# Discord Bot setup
# Using minimal intents that don't require privileged access
intents = discord.Intents.default()
intents.message_content = True  # Only enabling message content intent

# For full functionality, enable these intents in Discord Developer Portal
# and then uncomment these lines:
# intents.members = True       # SERVER MEMBERS INTENT
# intents.presences = True     # PRESENCE INTENT

bot = commands.Bot(
    command_prefix=config.get('prefix', '!'),
    intents=intents,
    case_insensitive=True
)

@bot.event
async def on_ready():
    """Event triggered when the bot is ready and connected to Discord"""
    logger.info(f'Logged in as {bot.user.name} - {bot.user.id}')
    
    # Set bot status
    activity_name = config.get('activity_name', 'GTA RP')
    activity_type = getattr(discord.ActivityType, config.get('activity_type', 'playing').lower())
    activity = discord.Activity(type=activity_type, name=activity_name)
    await bot.change_presence(activity=activity)
    
    # Load cogs (modules)
    await load_cogs()
    
    logger.info(f"Bot is ready! Serving {len(bot.guilds)} servers.")

async def load_cogs():
    """Load all cog modules"""
    cogs = [
        'cogs.allowlist',
        'cogs.moderation',
        'cogs.announcements',
        'cogs.suggestions'
    ]
    
    for cog in cogs:
        try:
            await bot.load_extension(cog)
            logger.info(f"Loaded cog: {cog}")
        except Exception as e:
            logger.error(f"Error loading cog {cog}: {str(e)}")

@bot.event
async def on_command_error(ctx, error):
    """Tratamento global de erros de comandos"""
    if isinstance(error, commands.CommandNotFound):
        return
    elif isinstance(error, commands.MissingRequiredArgument):
        await ctx.send(f"‚ùå **Argumento obrigat√≥rio faltando:** {error.param.name}")
    elif isinstance(error, commands.MissingPermissions):
        await ctx.send("‚ùå **Sem permiss√£o:** Voc√™ n√£o tem permiss√£o para usar este comando.")
    elif isinstance(error, commands.BotMissingPermissions):
        await ctx.send(f"‚ùå **Permiss√µes necess√°rias:** Preciso das seguintes permiss√µes para executar este comando: {', '.join(error.missing_permissions)}")
    elif isinstance(error, commands.CommandOnCooldown):
        await ctx.send(f"‚è±Ô∏è **Comando em cooldown:** Tente novamente em {error.retry_after:.2f} segundos.")
    elif isinstance(error, commands.CheckFailure):
        await ctx.send("‚ùå **Acesso negado:** Voc√™ n√£o tem permiss√£o para usar este comando.")
    else:
        logger.error(f"Erro de comando n√£o tratado: {str(error)}")
        await ctx.send(f"‚ùå **Ocorreu um erro:** {str(error)}")

@bot.command(name="ping")
async def ping(ctx):
    """Comando simples para verificar se o bot est√° respondendo"""
    latency = round(bot.latency * 1000)
    await ctx.send(f"üèì Pong! Lat√™ncia do bot: {latency}ms")

@bot.command(name="reload")
@commands.has_permissions(administrator=True)
async def reload_cog(ctx, cog: str):
    """Recarrega um m√≥dulo espec√≠fico do bot"""
    try:
        await bot.reload_extension(f"cogs.{cog}")
        await ctx.send(f"‚úÖ M√≥dulo '{cog}' foi recarregado com sucesso.")
    except Exception as e:
        await ctx.send(f"‚ùå Falha ao recarregar m√≥dulo '{cog}': {str(e)}")
        logger.error(f"Erro ao recarregar m√≥dulo {cog}: {str(e)}")

@bot.command(name="restart")
@commands.has_permissions(administrator=True)
async def restart_bot(ctx):
    """Reinicia o bot inteiro (requer acesso ao sistema)"""
    await ctx.send("üîÑ Reiniciando o bot... Isso pode levar alguns segundos.")
    try:
        # Salvando qualquer dado pendente
        await ctx.send("‚úÖ Bot ser√° reiniciado. At√© logo!")
        
        # Fechando o bot
        await bot.close()
        
        # O sistema de hospedagem deve reiniciar o bot automaticamente
    except Exception as e:
        await ctx.send(f"‚ùå Erro ao tentar reiniciar: {str(e)}")
        logger.error(f"Erro ao reiniciar: {str(e)}")

@bot.command(name="ajuda", aliases=["help"])
async def help_command(ctx, modulo=None):
    """Exibe ajuda sobre os comandos do bot"""
    
    if modulo is None:
        # Exibe ajuda geral
        embed = discord.Embed(
            title="ü§ñ Ajuda do Bot de Gerenciamento",
            description="Bem-vindo √† ajuda do bot de gerenciamento de servidor GTA RP. Abaixo est√£o os m√≥dulos dispon√≠veis.",
            color=0x3498db
        )
        
        embed.add_field(
            name="üìã M√≥dulos",
            value=(
                "**`!ajuda whitelist`** - Sistema de whitelist\n"
                "**`!ajuda modera√ß√£o`** - Comandos de modera√ß√£o\n"
                "**`!ajuda an√∫ncios`** - Sistema de an√∫ncios\n"
                "**`!ajuda sugest√µes`** - Sistema de sugest√µes\n"
                "**`!ajuda admin`** - Comandos administrativos"
            ),
            inline=False
        )
        
        embed.add_field(
            name="‚ÑπÔ∏è Comandos B√°sicos",
            value=(
                "**`!ping`** - Verifica se o bot est√° funcionando\n"
                "**`!ajuda`** - Exibe esta mensagem de ajuda\n"
            ),
            inline=False
        )
        
        embed.set_footer(text="Use !ajuda <m√≥dulo> para ver comandos espec√≠ficos")
    
    elif modulo.lower() in ["whitelist", "wl"]:
        # Ajuda sobre o sistema de whitelist
        embed = discord.Embed(
            title="üìù Sistema de Whitelist",
            description="Comandos para gerenciar o sistema de whitelist do servidor.",
            color=0x3498db
        )
        
        embed.add_field(
            name="‚öôÔ∏è Configura√ß√£o",
            value=(
                "**`!allowlist configure`** - Ver ou modificar configura√ß√µes de whitelist\n"
                "**`!allowlist setup_whitelist #canal`** - Configura um canal com bot√£o de whitelist"
            ),
            inline=False
        )
        
        embed.add_field(
            name="üëÆ Administra√ß√£o",
            value=(
                "**`!allowlist dashboard`** - Painel de status da whitelist\n"
                "**`!allowlist review <ID>`** - Revisa uma aplica√ß√£o pendente\n"
                "**`!allowlist add @usu√°rio`** - Adiciona usu√°rio √† whitelist\n"
                "**`!allowlist remove @usu√°rio`** - Remove usu√°rio da whitelist\n"
                "**`!allowlist list`** - Lista usu√°rios na whitelist"
            ),
            inline=False
        )
        
        embed.set_footer(text="Todos os comandos requerem permiss√µes de administrador ou moderador")
        
    elif modulo.lower() in ["modera√ß√£o", "moderacao", "mod"]:
        # Ajuda sobre comandos de modera√ß√£o
        embed = discord.Embed(
            title="üõ°Ô∏è Comandos de Modera√ß√£o",
            description="Ferramentas para modera√ß√£o do servidor.",
            color=0xe74c3c
        )
        
        embed.add_field(
            name="‚ö†Ô∏è Avisos",
            value=(
                "**`!warn @usu√°rio <motivo>`** - Adiciona advert√™ncia\n"
                "**`!warnings @usu√°rio`** - Mostra advert√™ncias\n"
                "**`!clearwarnings @usu√°rio`** - Limpa advert√™ncias"
            ),
            inline=False
        )
        
        embed.add_field(
            name="üö´ Puni√ß√µes",
            value=(
                "**`!ban @usu√°rio [tempo] <motivo>`** - Bane usu√°rio (temporariamente ou permanentemente)\n"
                "**`!unban ID_usu√°rio <motivo>`** - Remove banimento\n"
                "**`!kick @usu√°rio <motivo>`** - Expulsa usu√°rio\n"
                "**`!mute @usu√°rio [tempo] <motivo>`** - Silencia usu√°rio\n"
                "**`!unmute @usu√°rio <motivo>`** - Remove silenciamento"
            ),
            inline=False
        )
        
    elif modulo.lower() in ["anuncios", "an√∫ncios", "anuncio", "an√∫ncio"]:
        # Ajuda sobre sistema de an√∫ncios
        embed = discord.Embed(
            title="üì¢ Sistema de An√∫ncios",
            description="Comandos para enviar an√∫ncios no servidor.",
            color=0xf1c40f
        )
        
        embed.add_field(
            name="üì£ Comandos",
            value=(
                "**`!announce <mensagem>`** - Envia an√∫ncio simples\n"
                "**`!create_embed`** - Cria an√∫ncio personalizado com embed"
            ),
            inline=False
        )
        
    elif modulo.lower() in ["sugest√µes", "sugestoes", "sugest√£o", "sugestao"]:
        # Ajuda sobre sistema de sugest√µes
        embed = discord.Embed(
            title="üí° Sistema de Sugest√µes",
            description="Comandos para gerenciar sugest√µes do servidor.",
            color=0x2ecc71
        )
        
        embed.add_field(
            name="üë• Comandos para Usu√°rios",
            value=(
                "**`!suggest <sugest√£o>`** - Envia uma sugest√£o"
            ),
            inline=False
        )
        
        embed.add_field(
            name="‚öôÔ∏è Comandos para Staff",
            value=(
                "**`!approve_suggestion <ID> [coment√°rio]`** - Aprova uma sugest√£o\n"
                "**`!reject_suggestion <ID> [motivo]`** - Rejeita uma sugest√£o\n"
                "**`!consider_suggestion <ID> [coment√°rio]`** - Marca sugest√£o como sendo considerada\n"
                "**`!implement_suggestion <ID> [coment√°rio]`** - Marca sugest√£o como implementada"
            ),
            inline=False
        )
        
    elif modulo.lower() in ["admin", "administrador", "administra√ß√£o", "administracao"]:
        # Ajuda sobre comandos administrativos
        embed = discord.Embed(
            title="‚öôÔ∏è Comandos Administrativos",
            description="Comandos para administra√ß√£o do bot e servidor.",
            color=0x9b59b6
        )
        
        embed.add_field(
            name="üîß Comandos",
            value=(
                "**`!setup`** - Assistente interativo de configura√ß√£o do servidor\n"
                "**`!reload <cog>`** - Recarrega um m√≥dulo espec√≠fico do bot\n"
                "**`!restart`** - Reinicia o bot completamente"
            ),
            inline=False
        )
        
    else:
        # M√≥dulo n√£o reconhecido
        embed = discord.Embed(
            title="‚ùì M√≥dulo N√£o Encontrado",
            description=f"O m√≥dulo '{modulo}' n√£o foi reconhecido. Use `!ajuda` para ver os m√≥dulos dispon√≠veis.",
            color=0xe74c3c
        )
    
    await ctx.send(embed=embed)

@bot.command(name="setup")
@commands.has_permissions(administrator=True)
async def setup_server(ctx):
    """Guia interativo para configurar o servidor"""
    # Iniciar o assistente de configura√ß√£o
    await ctx.send("üìù **Assistente de Configura√ß√£o do Servidor**\n\nVamos configurar seu servidor passo a passo. Responda √†s perguntas conforme elas aparecerem.")
    
    # Fun√ß√£o para esperar resposta
    async def get_response(question, timeout=60):
        await ctx.send(question)
        try:
            response = await bot.wait_for(
                'message', 
                check=lambda m: m.author == ctx.author and m.channel == ctx.channel,
                timeout=timeout
            )
            return response.content
        except asyncio.TimeoutError:
            await ctx.send("‚è±Ô∏è Tempo esgotado. Configura√ß√£o cancelada.")
            return None
    
    # Configura√ß√£o do nome do servidor
    server_name = await get_response("1Ô∏è‚É£ Qual √© o nome do seu servidor de GTA RP?")
    if not server_name:
        return
    
    # Configura√ß√£o de cargos
    await ctx.send("‚öôÔ∏è **Configura√ß√£o de Cargos**\nAgora vamos configurar os cargos principais.")
    
    # Cargo de Admin
    admin_input = await get_response("2Ô∏è‚É£ Mencione o cargo de Administrador (@cargo):")
    if not admin_input:
        return
    
    # Cargo de Moderador
    mod_input = await get_response("3Ô∏è‚É£ Mencione o cargo de Moderador (@cargo):")
    if not mod_input:
        return
    
    # Cargo de Turista
    tourist_input = await get_response("4Ô∏è‚É£ Mencione o cargo de Turista (usu√°rios n√£o aprovados) (@cargo):")
    if not tourist_input:
        return
    
    # Cargo de Morador
    resident_input = await get_response("5Ô∏è‚É£ Mencione o cargo de Morador (usu√°rios aprovados) (@cargo):")
    if not resident_input:
        return
    
    # Configura√ß√£o de canais
    await ctx.send("üì¢ **Configura√ß√£o de Canais**\nAgora vamos configurar os canais principais.")
    
    # Canal de an√∫ncios
    announcements_input = await get_response("6Ô∏è‚É£ Mencione o canal de an√∫ncios (#canal):")
    if not announcements_input:
        return
    
    # Canal de resultados da whitelist
    results_input = await get_response("7Ô∏è‚É£ Mencione o canal para resultados de whitelist (#canal):")
    if not results_input:
        return
    
    # Canal de whitelist aprovados
    approved_input = await get_response("8Ô∏è‚É£ Mencione o canal para notifica√ß√µes de whitelist aprovadas (#canal):")
    if not approved_input:
        return
    
    # Canal de whitelist reprovados
    rejected_input = await get_response("9Ô∏è‚É£ Mencione o canal para notifica√ß√µes de whitelist reprovadas (#canal):")
    if not rejected_input:
        return
    
    # Extrai IDs dos cargos e canais mencionados
    try:
        # Extrai IDs dos cargos
        admin_id = int(admin_input.strip('<@&>'))
        mod_id = int(mod_input.strip('<@&>'))
        tourist_id = int(tourist_input.strip('<@&>'))
        resident_id = int(resident_input.strip('<@&>'))
        
        # Extrai IDs dos canais
        announcements_id = int(announcements_input.strip('<#>'))
        results_id = int(results_input.strip('<#>'))
        approved_id = int(approved_input.strip('<#>'))
        rejected_id = int(rejected_input.strip('<#>'))
        
        # Carrega a configura√ß√£o atual
        with open('config.json', 'r') as f:
            config = json.load(f)
        
        # Atualiza a configura√ß√£o
        config['server_name'] = server_name
        
        # Atualiza cargos
        config['roles']['admin'] = admin_id
        config['roles']['moderator'] = mod_id
        config['roles']['tourist'] = tourist_id
        config['roles']['resident'] = resident_id
        config['roles']['allowed'] = resident_id  # Usa o mesmo ID para compatibilidade
        
        # Atualiza canais
        config['channels']['announcements'] = announcements_id
        config['channels']['allowlist_results'] = results_id
        config['channels']['allowlist_approved'] = approved_id
        config['channels']['allowlist_rejected'] = rejected_id
        
        # Salva a configura√ß√£o
        with open('config.json', 'w') as f:
            json.dump(config, f, indent=4)
        
        await ctx.send("‚úÖ **Configura√ß√£o conclu√≠da com sucesso!**\nAs configura√ß√µes do servidor foram atualizadas.")
        
    except ValueError:
        await ctx.send("‚ùå **Erro de formato**\nAlgumas entradas n√£o eram men√ß√µes v√°lidas. Use @cargo para cargos e #canal para canais.")
    except Exception as e:
        await ctx.send(f"‚ùå **Erro inesperado**\n{str(e)}")
        logger.error(f"Erro na configura√ß√£o: {str(e)}")

if __name__ == "__main__":
    # Initialize database
    setup_database()
    
    # Start the bot
    bot_token = os.getenv("DISCORD_TOKEN")
    if not bot_token:
        logger.error("No Discord token found. Set the DISCORD_TOKEN environment variable.")
        exit(1)
    
    bot.run(bot_token)
